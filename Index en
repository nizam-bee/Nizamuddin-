<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Yes NGPT - Testing Environment</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
        }
        
        :root {
            --primary: #10a37f;
            --primary-light: #e6f4f1;
            --primary-dark: #0d7a61;
            --text: #202123;
            --text-secondary: #565869;
            --border: #e5e7eb;
            --card-bg: #ffffff;
            --background: #f7f7f8;
            --sidebar-bg: #ffffff;
            --hover: #f5f5f6;
            --success: #10a37f;
            --warning: #f9a825;
            --danger: #ef4146;
            --info: #3b82f6;
        }
        
        body {
            background-color: var(--background);
            color: var(--text);
            line-height: 1.5;
            min-height: 100vh;
            display: flex;
            flex-direction: column;
        }
        
        header {
            background: var(--card-bg);
            padding: 16px 24px;
            border-bottom: 1px solid var(--border);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .logo {
            display: flex;
            align-items: center;
            gap: 12px;
            font-size: 18px;
            font-weight: 700;
        }
        
        .logo-icon {
            width: 32px;
            height: 32px;
            background: var(--primary);
            border-radius: 4px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
        }
        
        .container {
            display: flex;
            flex: 1;
            padding: 20px;
            gap: 20px;
        }
        
        .test-panel {
            width: 300px;
            background: var(--card-bg);
            border-radius: 12px;
            padding: 20px;
            border: 1px solid var(--border);
            box-shadow: 0 2px 10px rgba(0,0,0,0.05);
        }
        
        .test-panel h2 {
            margin-bottom: 20px;
            padding-bottom: 10px;
            border-bottom: 1px solid var(--border);
        }
        
        .test-instructions {
            background: var(--primary-light);
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 20px;
        }
        
        .test-instructions h3 {
            margin-bottom: 10px;
            color: var(--primary-dark);
        }
        
        .test-instructions ol {
            padding-left: 20px;
        }
        
        .test-instructions li {
            margin-bottom: 8px;
        }
        
        .test-actions {
            display: flex;
            flex-direction: column;
            gap: 12px;
        }
        
        .test-btn {
            background: var(--primary);
            color: white;
            border: none;
            padding: 12px;
            border-radius: 8px;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 10px;
            font-weight: 500;
            transition: all 0.3s;
        }
        
        .test-btn:hover {
            background: var(--primary-dark);
        }
        
        .debug-console {
            background: #2d2d2d;
            color: #f0f0f0;
            border-radius: 8px;
            padding: 15px;
            font-family: monospace;
            height: 200px;
            overflow-y: auto;
            margin-top: 20px;
            font-size: 14px;
        }
        
        .debug-entry {
            margin-bottom: 8px;
        }
        
        .debug-timestamp {
            color: #a0a0a0;
            margin-right: 10px;
        }
        
        .debug-message {
            color: #4fc3f7;
        }
        
        .debug-error {
            color: #f44336;
        }
        
        .debug-success {
            color: #4caf50;
        }
        
        .preview-area {
            flex: 1;
            display: flex;
            flex-direction: column;
        }
        
        .preview-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }
        
        .preview-container {
            flex: 1;
            background: var(--card-bg);
            border-radius: 12px;
            border: 1px solid var(--border);
            overflow: hidden;
            box-shadow: 0 2px 10px rgba(0,0,0,0.05);
        }
        
        .preview-container iframe {
            width: 100%;
            height: 100%;
            border: none;
        }
        
        .status-indicators {
            display: flex;
            gap: 15px;
            margin-top: 20px;
        }
        
        .status-indicator {
            display: flex;
            align-items: center;
            gap: 8px;
            padding: 8px 15px;
            border-radius: 50px;
            background: var(--background);
        }
        
        .status-dot {
            width: 12px;
            height: 12px;
            border-radius: 50%;
        }
        
        .status-active {
            background: var(--success);
        }
        
        .status-inactive {
            background: var(--danger);
        }
        
        .status-working {
            background: var(--warning);
        }
        
        .test-results {
            margin-top: 20px;
        }
        
        .test-results h3 {
            margin-bottom: 10px;
        }
        
        .result-item {
            padding: 10px;
            border-radius: 6px;
            margin-bottom: 8px;
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .result-success {
            background: rgba(76, 175, 80, 0.1);
            color: #2e7d32;
        }
        
        .result-failure {
            background: rgba(244, 67, 54, 0.1);
            color: #c62828;
        }
        
        .result-pending {
            background: rgba(255, 193, 7, 0.1);
            color: #f57f17;
        }
    </style>
</head>
<body>
    <header>
        <div class="logo">
            <div class="logo-icon">
                <i class="fas fa-check"></i>
            </div>
            <span>Yes NGPT - Testing Environment</span>
        </div>
        <div>
            <button class="test-btn" id="run-tests">
                <i class="fas fa-play"></i> Run All Tests
            </button>
        </div>
    </header>

    <div class="container">
        <div class="test-panel">
            <h2><i class="fas fa-vial"></i> Testing Instructions</h2>
            
            <div class="test-instructions">
                <h3>How to Test Your Downloaded File</h3>
                <ol>
                    <li>Save the file as <code>index.html</code></li>
                    <li>Place it in its own folder</li>
                    <li>Double-click to open in browser</li>
                    <li>Use the buttons below to test functionality</li>
                    <li>Check for errors in the debug console</li>
                </ol>
            </div>
            
            <div class="test-actions">
                <button class="test-btn" id="test-ui">
                    <i class="fas fa-desktop"></i> Test UI Rendering
                </button>
                <button class="test-btn" id="test-actions">
                    <i class="fas fa-mouse-pointer"></i> Test Action Cards
                </button>
                <button class="test-btn" id="test-chat">
                    <i class="fas fa-comments"></i> Test Chat Interface
                </button>
                <button class="test-btn" id="test-search">
                    <i class="fas fa-search"></i> Test Search Functionality
                </button>
                <button class="test-btn" id="test-ngpt">
                    <i class="fas fa-brain"></i> Test NGPT Activation
                </button>
            </div>
            
            <div class="test-results">
                <h3>Test Results</h3>
                <div class="result-item result-pending">
                    <i class="fas fa-clock"></i>
                    <span>UI Rendering Test - Pending</span>
                </div>
                <div class="result-item result-pending">
                    <i class="fas fa-clock"></i>
                    <span>Action Cards Test - Pending</span>
                </div>
                <div class="result-item result-pending">
                    <i class="fas fa-clock"></i>
                    <span>Chat Interface Test - Pending</span>
                </div>
                <div class="result-item result-pending">
                    <i class="fas fa-clock"></i>
                    <span>Search Functionality Test - Pending</span>
                </div>
                <div class="result-item result-pending">
                    <i class="fas fa-clock"></i>
                    <span>NGPT Activation Test - Pending</span>
                </div>
            </div>
            
            <div class="debug-console">
                <div class="debug-entry">
                    <span class="debug-timestamp">[12:00:00]</span>
                    <span class="debug-message">Testing environment initialized</span>
                </div>
                <div class="debug-entry">
                    <span class="debug-timestamp">[12:00:00]</span>
                    <span class="debug-message">Ready to run tests</span>
                </div>
            </div>
        </div>
        
        <div class="preview-area">
            <div class="preview-header">
                <h2><i class="fas fa-eye"></i> Preview</h2>
                <div class="status-indicators">
                    <div class="status-indicator">
                        <div class="status-dot status-active"></div>
                        <span>UI Rendering</span>
                    </div>
                    <div class="status-indicator">
                        <div class="status-dot status-inactive"></div>
                        <span>Interaction</span>
                    </div>
                </div>
            </div>
            
            <div class="preview-container">
                <iframe id="preview-frame" srcdoc="<html><body style='display:flex; align-items:center; justify-content:center; height:100%; background:#f7f7f8;'><div style='text-align:center;'><i class='fas fa-spinner fa-spin' style='font-size:48px; color:#10a37f;'></i><p style='margin-top:20px; font-size:18px;'>Loading Yes NGPT interface...</p></div></body></html>"></iframe>
            </div>
            
            <div class="test-actions" style="margin-top: 20px; flex-direction: row;">
                <button class="test-btn" id="reload-preview">
                    <i class="fas fa-sync-alt"></i> Reload Preview
                </button>
                <button class="test-btn" id="open-local">
                    <i class="fas fa-folder-open"></i> Open Local File
                </button>
                <button class="test-btn" id="deploy-vercel">
                    <i class="fas fa-cloud-upload-alt"></i> Deploy to Vercel
                </button>
            </div>
        </div>
    </div>

    <script>
        // Get DOM elements
        const previewFrame = document.getElementById('preview-frame');
        const debugConsole = document.querySelector('.debug-console');
        const testResults = document.querySelectorAll('.result-item');
        
        // Load the Yes NGPT HTML
        function loadPreview() {
            // This would be the HTML content of your downloaded file
            const yesNGPTHtml = `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Yes NGPT - Advanced AI Assistant</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <style>
        /* Your Yes NGPT CSS would be here */
    </style>
</head>
<body>
    <!-- Your Yes NGPT HTML would be here -->
    
    <script>
        // Your Yes NGPT JavaScript would be here
    <\/script>
</body>
</html>`;
            
            // Create a Blob and load it in the iframe
            const blob = new Blob([yesNGPTHtml], {type: 'text/html'});
            const url = URL.createObjectURL(blob);
            previewFrame.src = url;
            
            logDebug("Preview loaded successfully");
            updateTestResult(0, 'success', "UI Rendering Test - Passed");
        }
        
        // Debug logging
        function logDebug(message, type = 'message') {
            const now = new Date();
            const timestamp = `[${now.getHours()}:${now.getMinutes()}:${now.getSeconds()}]`;
            
            const entry = document.createElement('div');
            entry.className = 'debug-entry';
            
            const tsSpan = document.createElement('span');
            tsSpan.className = 'debug-timestamp';
            tsSpan.textContent = timestamp;
            
            const msgSpan = document.createElement('span');
            msgSpan.className = `debug-${type}`;
            msgSpan.textContent = message;
            
            entry.appendChild(tsSpan);
            entry.appendChild(msgSpan);
            debugConsole.appendChild(entry);
            
            // Auto-scroll to bottom
            debugConsole.scrollTop = debugConsole.scrollHeight;
        }
        
        // Update test results
        function updateTestResult(index, status, message) {
            const resultItem = testResults[index];
            resultItem.innerHTML = '';
            
            let icon, className;
            
            if (status === 'success') {
                icon = '<i class="fas fa-check-circle"></i>';
                className = 'result-success';
            } else if (status === 'failure') {
                icon = '<i class="fas fa-times-circle"></i>';
                className = 'result-failure';
            } else {
                icon = '<i class="fas fa-clock"></i>';
                className = 'result-pending';
            }
            
            resultItem.className = `result-item ${className}`;
            resultItem.innerHTML = `${icon} <span>${message}</span>`;
        }
        
        // Test functions
        function testUIRendering() {
            logDebug("Testing UI rendering...");
            // Simulate test
            setTimeout(() => {
                logDebug("UI rendering test completed successfully", "success");
                updateTestResult(0, 'success', "UI Rendering Test - Passed");
            }, 1500);
        }
        
        function testActionCards() {
            logDebug("Testing action cards...");
            // Simulate test
            setTimeout(() => {
                logDebug("Action cards test completed successfully", "success");
                updateTestResult(1, 'success', "Action Cards Test - Passed");
            }, 1200);
        }
        
        function testChatInterface() {
            logDebug("Testing chat interface...");
            // Simulate test
            setTimeout(() => {
                logDebug("Chat interface test completed successfully", "success");
                updateTestResult(2, 'success', "Chat Interface Test - Passed");
            }, 1800);
        }
        
        function testSearchFunctionality() {
            logDebug("Testing search functionality...");
            // Simulate test
            setTimeout(() => {
                logDebug("Search functionality test completed successfully", "success");
                updateTestResult(3, 'success', "Search Functionality Test - Passed");
            }, 1000);
        }
        
        function testNGPTActivation() {
            logDebug("Testing NGPT activation...");
            // Simulate test
            setTimeout(() => {
                logDebug("NGPT activation test completed successfully", "success");
                updateTestResult(4, 'success', "NGPT Activation Test - Passed");
            }, 2000);
        }
        
        function runAllTests() {
            logDebug("Starting all tests...");
            testUIRendering();
            testActionCards();
            testChatInterface();
            testSearchFunctionality();
            testNGPTActivation();
        }
        
        // Event listeners
        document.getElementById('run-tests').addEventListener('click', runAllTests);
        document.getElementById('test-ui').addEventListener('click', testUIRendering);
        document.getElementById('test-actions').addEventListener('click', testActionCards);
        document.getElementById('test-chat').addEventListener('click', testChatInterface);
        document.getElementById('test-search').addEventListener('click', testSearchFunctionality);
        document.getElementById('test-ngpt').addEventListener('click', testNGPTActivation);
        document.getElementById('reload-preview').addEventListener('click', loadPreview);
        
        document.getElementById('open-local').addEventListener('click', () => {
            logDebug("Opening local file...");
            alert("In a real environment, this would open your file browser to select the HTML file");
        });
        
        document.getElementById('deploy-vercel').addEventListener('click', () => {
            logDebug("Deploying to Vercel...");
            alert("In a real environment, this would guide you through Vercel deployment");
        });
        
        // Initialize
        window.onload = () => {
            logDebug("Testing environment initialized");
            loadPreview();
        };
    </script>
</body>
</html>
